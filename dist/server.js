module.exports=function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var n={};return t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=5)}([function(e,t){e.exports=require("react")},function(e,t){e.exports=require("react-router-dom")},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.NotFoundPage=void 0;var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(0),c=function(e){return e&&e.__esModule?e:{default:e}}(a),l=n(1),s=t.NotFoundPage=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return u(t,e),i(t,[{key:"componentWillMount",value:function(){var e=this.props.staticContext;e&&(e.is404=!0)}},{key:"render",value:function(){return c.default.createElement("div",{className:"not-found"},c.default.createElement("h1",null,"404"),c.default.createElement("h2",null,"Page not found!"),c.default.createElement("p",null,c.default.createElement(l.Link,{to:"/"},"Go back to the main page")))}}]),t}(c.default.Component);t.default=s},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},u=n(0),i=r(u),a=n(13),c=r(a),l=n(4),s=r(l),f=n(2),p=r(f);t.default=function(e,t){return[{path:"/",component:c.default,exact:!0},{path:"/page/:uid",component:s.default,render:function(n){return i.default.createElement(s.default,o({},n,{prismicCtx:e,PRISMIC_UNIVERSAL_DATA:t}))}},{component:p.default}]}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=n(0),l=r(c),s=n(2),f=(r(s),n(1)),p=n(14),d=r(p),_=function(e){function t(e){o(this,t);var n=u(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={notFound:!1,linkResolver:null},n}return i(t,e),a(t,[{key:"render",value:function(){if(this.props.PRISMIC_UNIVERSAL_DATA){var e="get-started"===this.props.PRISMIC_UNIVERSAL_DATA.uid?"/page/second-page":"/page/get-started";return l.default.createElement("div",null,l.default.createElement(f.Link,{to:e},"Link"),l.default.createElement("pre",null,JSON.stringify(this.props.PRISMIC_UNIVERSAL_DATA,null,2)))}if(this.state.notFound)return l.default.createElement(NotFoundPage,null)}}]),t}(l.default.Component);t.default=d.default.UniversalComponent({request:function(e,t){return e.api.getByUID("page",t.match.params.uid,{})},component:_})},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t,n,r,o){(r.component.PRISMIC_FETCH_REQUEST&&r.component.PRISMIC_FETCH_REQUEST()||function(){return Promise.resolve()})(t.locals.ctx,{match:o}).then(function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r={},o=(0,_.renderToString)(f.default.createElement(v.StaticRouter,{location:e.url,context:r},f.default.createElement(m.default,{primicCtx:t.locals.ctx,PRISMIC_UNIVERSAL_DATA:n})));if(r.url)return t.redirect(302,r.url);var u=r.is404?404:200;return t.status(u).render("index",{markup:o,PRISMIC_UNIVERSAL_DATA:n})}).catch(function(e){return n(e.message)})}var u=n(6),i=r(u),a=n(7),c=n(8),l=r(c),s=n(0),f=r(s),p=n(9),d=r(p),_=n(10),v=n(1),h=n(11),m=r(h),y=n(3),b=r(y),E=n(15),I=r(E),P=new l.default,O=new a.Server(P);P.set("view engine","ejs"),P.set("views",i.default.join(__dirname,"../views")),P.use(l.default.static(i.default.join(__dirname,"../dist"))),P.use(function(e,t,n){t.locals.ctx={endpoint:I.default.apiEndpoint,linkResolver:I.default.linkResolver},d.default.api(I.default.apiEndpoint,{accessToken:I.default.accessToken,req:e}).then(function(e){t.locals.ctx.api=e,n()}).catch(function(e){n(e.message)})}),P.get("*",function(e,t,n){(0,b.default)(t.locals.ctx).some(function(r){var u=(0,v.matchPath)(e.url,r);return u&&o(e,t,n,r,u),u})});var g=process.env.PORT||3e3;O.listen(g,function(e){return e?console.error(e):console.info("\n      Server running on http://localhost:"+g+" [production]\n    ")})},function(e,t){e.exports=require("path")},function(e,t){e.exports=require("http")},function(e,t){e.exports=require("express")},function(e,t){e.exports=require("prismic-javascript")},function(e,t){e.exports=require("react-dom/server")},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.App=void 0;var o=n(0),u=(r(o),n(12)),i=r(u),a=n(4),c=(r(a),n(2),t.App=function(e){return(0,i.default)(e)});t.default=c},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},u=n(0),i=r(u),a=n(1),c=n(3),l=r(c);t.default=function(e){var t=e.prismicCtx,n=e.PRISMIC_UNIVERSAL_DATA;return i.default.createElement(a.Switch,null,(0,l.default)(t,n).map(function(e,t){var n=Object.assign({},e);return n.render&&delete n.component,i.default.createElement(a.Route,o({key:"route-"+t},n))}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=function(e){return e&&e.__esModule?e:{default:e}}(r);t.default=function(e){return o.default.createElement("div",null,"This is my homepage")}},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function i(e){var t=e.request,n=e.component;if(!t)throw new Error("Missing prismic query in Fetch Decorator <--\x3e Prismic React");return function(e){function i(e){r(this,i);var t=o(this,(i.__proto__||Object.getPrototypeOf(i)).call(this,e));return t.state={PRISMIC_UNIVERSAL_DATA:null},t}return u(i,e),a(i,[{key:"isValidObject",value:function(e){return e&&e.constructor===Object&&Object.keys(e).length>0}},{key:"componentWillMount",value:function(){var e=this;this.isValidObject(this.props.PRISMIC_UNIVERSAL_DATA)?Promise.resolve(this.props.PRISMIC_UNIVERSAL_DATA):t(this.props.prismicCtx,this.props).then(function(t){e.setState({PRISMIC_UNIVERSAL_DATA:t})}).catch(function(e){return console.log(e.message)})}},{key:"componentWillReceiveProps",value:function(e){var n=this;t(e.prismicCtx,e).then(function(e){n.setState({PRISMIC_UNIVERSAL_DATA:e})}).catch(function(e){return console.log(e.message)})}},{key:"render",value:function(){var e=this.state.PRISMIC_UNIVERSAL_DATA?{PRISMIC_UNIVERSAL_DATA:this.state.PRISMIC_UNIVERSAL_DATA}:{},t=Object.assign({},this.props,e);return l.default.createElement(n,t)}}],[{key:"PRISMIC_FETCH_REQUEST",value:function(){return t}}]),i}(l.default.Component)}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=n(0),l=function(e){return e&&e.__esModule?e:{default:e}}(c);t.default={UniversalComponent:i}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={apiEndpoint:"https://prismic-universal.prismic.io/api/v2",linkResolver:function(e,t){return"/"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,